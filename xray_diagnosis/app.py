import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image

# –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏–∞–≥–Ω–æ–∑–æ–≤
CLASS_NAMES_EN = [
    'Atelectasis', 'Cardiomegaly', 'Consolidation', 'Edema', 'Effusion',
    'Emphysema', 'Fibrosis', 'Hernia', 'Infiltration', 'Mass',
    'Nodule', 'Pleural_Thickening', 'Pneumonia', 'Pneumothorax', 'No Finding'
]

CLASS_NAMES_RU = [
    '–ê—Ç–µ–ª–µ–∫—Ç–∞–∑', '–ö–∞—Ä–¥–∏–æ–º–µ–≥–∞–ª–∏—è', '–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è', '–û—Ç—ë–∫', '–≠–∫—Å—Å—É–¥–∞—Ç',
    '–≠–º—Ñ–∏–∑–µ–º–∞', '–§–∏–±—Ä–æ–∑', '–ì—Ä—ã–∂–∞', '–ò–Ω—Ñ–∏–ª—å—Ç—Ä–∞—Ç', '–û–ø—É—Ö–æ–ª—å',
    '–£–∑–µ–ª', '–£—Ç–æ–ª—â–µ–Ω–∏–µ –ø–ª–µ–≤—Ä—ã', '–ü–Ω–µ–≤–º–æ–Ω–∏—è', '–ü–Ω–µ–≤–º–æ—Ç–æ—Ä–∞–∫—Å', '–ë–µ–∑ –ø–∞—Ç–æ–ª–æ–≥–∏–∏'
]

IMG_SIZE = (224, 224)
MODEL_PATH = "xray_model.keras"

st.set_page_config(page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –ø–æ —Ä–µ–Ω—Ç–≥–µ–Ω—É", layout="centered")

@st.cache_resource
def load_model():
    return tf.keras.models.load_model(MODEL_PATH, compile=False)

def preprocess_image(image: Image.Image):
    image = image.convert("RGB")
    image = image.resize(IMG_SIZE)
    image_array = np.array(image) / 255.0
    return np.expand_dims(image_array, axis=0)

# üåê –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞
lang = st.selectbox("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select language", ["–†—É—Å—Å–∫–∏–π", "English"])
if lang == "–†—É—Å—Å–∫–∏–π":
    class_names = CLASS_NAMES_RU
    upload_label = "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    analyzing_text = "### ‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."
    result_title = "## üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    image_caption = "üñº –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    page_title = "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –ø–æ —Ä–µ–Ω—Ç–≥–µ–Ω—É"
    instructions = "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏, –∏ –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∂–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è."
else:
    class_names = CLASS_NAMES_EN
    upload_label = "üì§ Upload an image"
    analyzing_text = "### ‚è≥ Analyzing the image..."
    result_title = "## üßæ Classification Results"
    image_caption = "üñº Uploaded Image"
    page_title = "X-ray Disease Classification"
    instructions = "Upload a chest X-ray image, and the model will show the probability of each disease."

# CSS –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä–æ–≤
st.markdown("""
    <style>
        .label {
            font-weight: 600;
            font-size: 16px;
        }
        .bar-container {
            background-color: #e0e0e0;
            border-radius: 5px;
            height: 20px;
            margin-top: 5px;
            margin-bottom: 15px;
        }
        .bar {
            height: 100%;
            border-radius: 5px;
        }
    </style>
""", unsafe_allow_html=True)

st.title("ü©∫ " + page_title)
st.markdown(instructions)

uploaded_file = st.file_uploader(upload_label, type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption=image_caption, use_column_width=True)
    st.markdown(analyzing_text)

    model = load_model()
    preprocessed = preprocess_image(image)
    prediction = model.predict(preprocessed)[0]

    st.markdown(result_title)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É–±—ã–≤–∞–Ω–∏—é
    sorted_indices = np.argsort(prediction)[::-1]
    for idx in sorted_indices:
        name = class_names[idx]
        percent = prediction[idx] * 100
        color = "#d9534f" if percent > 60 else "#f0ad4e" if percent > 30 else "#5bc0de"
        st.markdown(
            f"""
            <div class="label">{name}: <span style='color:{color}'>{percent:.2f}%</span></div>
            <div class="bar-container">
                <div class="bar" style="width:{percent}%; background-color:{color}"></div>
            </div>
            """,
            unsafe_allow_html=True
        )
