import streamlit as st
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import cv2
from PIL import Image

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
CLASS_NAMES = [
    'Atelectasis', 'Cardiomegaly', 'Consolidation', 'Edema', 'Effusion',
    'Emphysema', 'Fibrosis', 'Hernia', 'Infiltration', 'Mass',
    'Nodule', 'Pleural_Thickening', 'Pneumonia', 'Pneumothorax'
]
MODEL_PATH = "xray_model.keras"
IMG_SIZE = (224, 224)
THRESHOLD = 0.5

# === –ö–≠–®–ò–†–û–í–ê–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò ===
@st.cache_resource
def load_model():
    return tf.keras.models.load_model(MODEL_PATH, compile=False)

model = load_model()

# === –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===
def preprocess_image(image: Image.Image) -> np.ndarray:
    image = image.convert("RGB")
    image = image.resize(IMG_SIZE)
    image_array = np.array(image).astype("float32") / 255.0
    return np.expand_dims(image_array, axis=0)

# === GRAD-CAM ===
def generate_gradcam(model, img_array, class_index):
    grad_model = tf.keras.models.Model(
        [model.inputs], [model.get_layer(index=-3).output, model.output]
    )
    with tf.GradientTape() as tape:
        conv_outputs, predictions = grad_model(img_array)
        loss = predictions[:, class_index]

    grads = tape.gradient(loss, conv_outputs)[0]
    conv_outputs = conv_outputs[0]
    weights = tf.reduce_mean(grads, axis=(0, 1))
    cam = np.zeros(conv_outputs.shape[:2], dtype=np.float32)

    for i, w in enumerate(weights):
        cam += w * conv_outputs[:, :, i]

    cam = np.maximum(cam, 0)
    cam = cv2.resize(cam.numpy(), IMG_SIZE)
    cam = (cam - cam.min()) / (cam.max() - cam.min() + 1e-8)
    return cam

# === BAR CHART ===
def plot_probabilities(preds):
    fig, ax = plt.subplots(figsize=(10, 6))
    colors = ["red" if p >= THRESHOLD else "gray" for p in preds]
    ax.barh(CLASS_NAMES, preds, color=colors)
    ax.set_xlim([0, 1])
    ax.invert_yaxis()
    ax.set_xlabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
    ax.set_title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
    st.pyplot(fig)

# === UI ===
st.set_page_config(page_title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–Ω—Ç–≥–µ–Ω—É", layout="centered")
st.title("ü©ª –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –ø–æ —Ä–µ–Ω—Ç–≥–µ–Ω—É")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ–ª—å—é.")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])

if uploaded_file:
    image = Image.open(uploaded_file)
    st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
    img_array = preprocess_image(image)

    preds = model.predict(img_array)[0]
    plot_probabilities(preds)

    high_preds = [(cls, float(prob)) for cls, prob in zip(CLASS_NAMES, preds) if prob >= THRESHOLD]

    if high_preds:
        st.markdown("### ü©∫ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:")
        for cls, prob in high_preds:
            st.write(f"**{cls}**: {prob*100:.2f}%")
    else:
        st.info("–°–µ—Ä—å—ë–∑–Ω—ã–µ –ø–∞—Ç–æ–ª–æ–≥–∏–∏ –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã (–≤—Å–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ < 50%).")

    # === GRAD-CAM –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ===
    top_class = int(np.argmax(preds))
    cam = generate_gradcam(model, img_array, top_class)
    heatmap = cv2.applyColorMap(np.uint8(255 * cam), cv2.COLORMAP_JET)
    orig = np.array(image.resize(IMG_SIZE))
    overlay = cv2.addWeighted(orig, 0.6, heatmap, 0.4, 0)

    st.markdown("### üå° Grad-CAM –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    st.image(overlay, caption=f"–û–±–ª–∞—Å—Ç—å –≤–Ω–∏–º–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {CLASS_NAMES[top_class]}", use_column_width=True)
